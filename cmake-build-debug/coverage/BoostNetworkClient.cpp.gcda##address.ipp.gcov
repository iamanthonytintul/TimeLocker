        -:    0:Source:/usr/include/boost/asio/ip/impl/address.ipp
        -:    0:Graph:/home/anthonytintul/CLionProjects/TLConsoleApplication/cmake-build-debug/CMakeFiles/TLConsoleApplication.dir/lib/BoostNetworkClient/BoostNetworkClient.cpp.gcno
        -:    0:Data:/home/anthonytintul/CLionProjects/TLConsoleApplication/cmake-build-debug/CMakeFiles/TLConsoleApplication.dir/lib/BoostNetworkClient/BoostNetworkClient.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// ip/impl/address.ipp
        -:    3:// ~~~~~~~~~~~~~~~~~~~
        -:    4://
        -:    5:// Copyright (c) 2003-2020 Christopher M. Kohlhoff (chris at kohlhoff dot com)
        -:    6://
        -:    7:// Distributed under the Boost Software License, Version 1.0. (See accompanying
        -:    8:// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -:    9://
        -:   10:
        -:   11:#ifndef BOOST_ASIO_IP_IMPL_ADDRESS_IPP
        -:   12:#define BOOST_ASIO_IP_IMPL_ADDRESS_IPP
        -:   13:
        -:   14:#if defined(_MSC_VER) && (_MSC_VER >= 1200)
        -:   15:# pragma once
        -:   16:#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)
        -:   17:
        -:   18:#include <boost/asio/detail/config.hpp>
        -:   19:#include <typeinfo>
        -:   20:#include <boost/asio/detail/throw_error.hpp>
        -:   21:#include <boost/asio/detail/throw_exception.hpp>
        -:   22:#include <boost/asio/error.hpp>
        -:   23:#include <boost/asio/ip/address.hpp>
        -:   24:#include <boost/asio/ip/bad_address_cast.hpp>
        -:   25:#include <boost/system/system_error.hpp>
        -:   26:
        -:   27:#include <boost/asio/detail/push_options.hpp>
        -:   28:
        -:   29:namespace boost {
        -:   30:namespace asio {
        -:   31:namespace ip {
        -:   32:
    #####:   33:address::address() BOOST_ASIO_NOEXCEPT
        -:   34:  : type_(ipv4),
        -:   35:    ipv4_address_(),
    #####:   36:    ipv6_address_()
    %%%%%:   36-block  0
        -:   37:{
    #####:   38:}
        -:   39:
        1:   40:address::address(
        1:   41:    const boost::asio::ip::address_v4& ipv4_address) BOOST_ASIO_NOEXCEPT
        -:   42:  : type_(ipv4),
        -:   43:    ipv4_address_(ipv4_address),
        1:   44:    ipv6_address_()
        1:   44-block  0
        -:   45:{
        1:   46:}
        -:   47:
    #####:   48:address::address(
    #####:   49:    const boost::asio::ip::address_v6& ipv6_address) BOOST_ASIO_NOEXCEPT
        -:   50:  : type_(ipv6),
        -:   51:    ipv4_address_(),
    #####:   52:    ipv6_address_(ipv6_address)
    %%%%%:   52-block  0
        -:   53:{
    #####:   54:}
        -:   55:
        -:   56:address::address(const address& other) BOOST_ASIO_NOEXCEPT
        -:   57:  : type_(other.type_),
        -:   58:    ipv4_address_(other.ipv4_address_),
        -:   59:    ipv6_address_(other.ipv6_address_)
        -:   60:{
        -:   61:}
        -:   62:
        -:   63:#if defined(BOOST_ASIO_HAS_MOVE)
        -:   64:address::address(address&& other) BOOST_ASIO_NOEXCEPT
        -:   65:  : type_(other.type_),
        -:   66:    ipv4_address_(other.ipv4_address_),
        -:   67:    ipv6_address_(other.ipv6_address_)
        -:   68:{
        -:   69:}
        -:   70:#endif // defined(BOOST_ASIO_HAS_MOVE)
        -:   71:
        -:   72:address& address::operator=(const address& other) BOOST_ASIO_NOEXCEPT
        -:   73:{
        -:   74:  type_ = other.type_;
        -:   75:  ipv4_address_ = other.ipv4_address_;
        -:   76:  ipv6_address_ = other.ipv6_address_;
        -:   77:  return *this;
        -:   78:}
        -:   79:
        -:   80:#if defined(BOOST_ASIO_HAS_MOVE)
        -:   81:address& address::operator=(address&& other) BOOST_ASIO_NOEXCEPT
        -:   82:{
        -:   83:  type_ = other.type_;
        -:   84:  ipv4_address_ = other.ipv4_address_;
        -:   85:  ipv6_address_ = other.ipv6_address_;
        -:   86:  return *this;
        -:   87:}
        -:   88:#endif // defined(BOOST_ASIO_HAS_MOVE)
        -:   89:
        -:   90:address& address::operator=(
        -:   91:    const boost::asio::ip::address_v4& ipv4_address) BOOST_ASIO_NOEXCEPT
        -:   92:{
        -:   93:  type_ = ipv4;
        -:   94:  ipv4_address_ = ipv4_address;
        -:   95:  ipv6_address_ = boost::asio::ip::address_v6();
        -:   96:  return *this;
        -:   97:}
        -:   98:
        -:   99:address& address::operator=(
        -:  100:    const boost::asio::ip::address_v6& ipv6_address) BOOST_ASIO_NOEXCEPT
        -:  101:{
        -:  102:  type_ = ipv6;
        -:  103:  ipv4_address_ = boost::asio::ip::address_v4();
        -:  104:  ipv6_address_ = ipv6_address;
        -:  105:  return *this;
        -:  106:}
        -:  107:
        1:  108:address make_address(const char* str)
        -:  109:{
        1:  110:  boost::system::error_code ec;
        1:  111:  address addr = make_address(str, ec);
        1:  111-block  0
        1:  112:  boost::asio::detail::throw_error(ec);
        2:  113:  return addr;
        1:  113-block  0
        1:  113-block  1
        -:  114:}
        -:  115:
        1:  116:address make_address(const char* str,
        -:  117:    boost::system::error_code& ec) BOOST_ASIO_NOEXCEPT
        -:  118:{
        -:  119:  boost::asio::ip::address_v6 ipv6_address =
        1:  120:    boost::asio::ip::make_address_v6(str, ec);
        1:  120-block  0
        1:  121:  if (!ec)
    #####:  122:    return address(ipv6_address);
    %%%%%:  122-block  0
        -:  123:
        -:  124:  boost::asio::ip::address_v4 ipv4_address =
        1:  125:    boost::asio::ip::make_address_v4(str, ec);
        1:  125-block  0
        1:  126:  if (!ec)
        1:  127:    return address(ipv4_address);
        1:  127-block  0
        -:  128:
    #####:  129:  return address();
    %%%%%:  129-block  0
        -:  130:}
        -:  131:
        -:  132:address make_address(const std::string& str)
        -:  133:{
        -:  134:  return make_address(str.c_str());
        -:  135:}
        -:  136:
        -:  137:address make_address(const std::string& str,
        -:  138:    boost::system::error_code& ec) BOOST_ASIO_NOEXCEPT
        -:  139:{
        -:  140:  return make_address(str.c_str(), ec);
        -:  141:}
        -:  142:
        -:  143:#if defined(BOOST_ASIO_HAS_STRING_VIEW)
        -:  144:
        -:  145:address make_address(string_view str)
        -:  146:{
        -:  147:  return make_address(static_cast<std::string>(str));
        -:  148:}
        -:  149:
        -:  150:address make_address(string_view str,
        -:  151:    boost::system::error_code& ec) BOOST_ASIO_NOEXCEPT
        -:  152:{
        -:  153:  return make_address(static_cast<std::string>(str), ec);
        -:  154:}
        -:  155:
        -:  156:#endif // defined(BOOST_ASIO_HAS_STRING_VIEW)
        -:  157:
        1:  158:boost::asio::ip::address_v4 address::to_v4() const
        -:  159:{
        1:  160:  if (type_ != ipv4)
        1:  160-block  0
        -:  161:  {
    #####:  162:    bad_address_cast ex;
    %%%%%:  162-block  0
    $$$$$:  162-block  1
    #####:  163:    boost::asio::detail::throw_exception(ex);
        -:  164:  }
        1:  165:  return ipv4_address_;
        1:  165-block  0
        -:  166:}
        -:  167:
    #####:  168:boost::asio::ip::address_v6 address::to_v6() const
        -:  169:{
    #####:  170:  if (type_ != ipv6)
    %%%%%:  170-block  0
        -:  171:  {
    #####:  172:    bad_address_cast ex;
    %%%%%:  172-block  0
    $$$$$:  172-block  1
    #####:  173:    boost::asio::detail::throw_exception(ex);
        -:  174:  }
    #####:  175:  return ipv6_address_;
    %%%%%:  175-block  0
        -:  176:}
        -:  177:
        -:  178:std::string address::to_string() const
        -:  179:{
        -:  180:  if (type_ == ipv6)
        -:  181:    return ipv6_address_.to_string();
        -:  182:  return ipv4_address_.to_string();
        -:  183:}
        -:  184:
        -:  185:#if !defined(BOOST_ASIO_NO_DEPRECATED)
        -:  186:std::string address::to_string(boost::system::error_code& ec) const
        -:  187:{
        -:  188:  if (type_ == ipv6)
        -:  189:    return ipv6_address_.to_string(ec);
        -:  190:  return ipv4_address_.to_string(ec);
        -:  191:}
        -:  192:#endif // !defined(BOOST_ASIO_NO_DEPRECATED)
        -:  193:
        -:  194:bool address::is_loopback() const BOOST_ASIO_NOEXCEPT
        -:  195:{
        -:  196:  return (type_ == ipv4)
        -:  197:    ? ipv4_address_.is_loopback()
        -:  198:    : ipv6_address_.is_loopback();
        -:  199:}
        -:  200:
        -:  201:bool address::is_unspecified() const BOOST_ASIO_NOEXCEPT
        -:  202:{
        -:  203:  return (type_ == ipv4)
        -:  204:    ? ipv4_address_.is_unspecified()
        -:  205:    : ipv6_address_.is_unspecified();
        -:  206:}
        -:  207:
        -:  208:bool address::is_multicast() const BOOST_ASIO_NOEXCEPT
        -:  209:{
        -:  210:  return (type_ == ipv4)
        -:  211:    ? ipv4_address_.is_multicast()
        -:  212:    : ipv6_address_.is_multicast();
        -:  213:}
        -:  214:
        -:  215:bool operator==(const address& a1, const address& a2) BOOST_ASIO_NOEXCEPT
        -:  216:{
        -:  217:  if (a1.type_ != a2.type_)
        -:  218:    return false;
        -:  219:  if (a1.type_ == address::ipv6)
        -:  220:    return a1.ipv6_address_ == a2.ipv6_address_;
        -:  221:  return a1.ipv4_address_ == a2.ipv4_address_;
        -:  222:}
        -:  223:
        -:  224:bool operator<(const address& a1, const address& a2) BOOST_ASIO_NOEXCEPT
        -:  225:{
        -:  226:  if (a1.type_ < a2.type_)
        -:  227:    return true;
        -:  228:  if (a1.type_ > a2.type_)
        -:  229:    return false;
        -:  230:  if (a1.type_ == address::ipv6)
        -:  231:    return a1.ipv6_address_ < a2.ipv6_address_;
        -:  232:  return a1.ipv4_address_ < a2.ipv4_address_;
        -:  233:}
        -:  234:
        -:  235:} // namespace ip
        -:  236:} // namespace asio
        -:  237:} // namespace boost
        -:  238:
        -:  239:#include <boost/asio/detail/pop_options.hpp>
        -:  240:
        -:  241:#endif // BOOST_ASIO_IP_IMPL_ADDRESS_IPP
