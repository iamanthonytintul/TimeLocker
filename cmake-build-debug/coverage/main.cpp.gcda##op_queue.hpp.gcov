        -:    0:Source:/usr/include/boost/asio/detail/op_queue.hpp
        -:    0:Graph:/home/anthonytintul/CLionProjects/TLConsoleApplication/cmake-build-debug/CMakeFiles/TLConsoleApplication.dir/src/main.cpp.gcno
        -:    0:Data:/home/anthonytintul/CLionProjects/TLConsoleApplication/cmake-build-debug/CMakeFiles/TLConsoleApplication.dir/src/main.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// detail/op_queue.hpp
        -:    3:// ~~~~~~~~~~~~~~~~~~~
        -:    4://
        -:    5:// Copyright (c) 2003-2020 Christopher M. Kohlhoff (chris at kohlhoff dot com)
        -:    6://
        -:    7:// Distributed under the Boost Software License, Version 1.0. (See accompanying
        -:    8:// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -:    9://
        -:   10:
        -:   11:#ifndef BOOST_ASIO_DETAIL_OP_QUEUE_HPP
        -:   12:#define BOOST_ASIO_DETAIL_OP_QUEUE_HPP
        -:   13:
        -:   14:#if defined(_MSC_VER) && (_MSC_VER >= 1200)
        -:   15:# pragma once
        -:   16:#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)
        -:   17:
        -:   18:#include <boost/asio/detail/noncopyable.hpp>
        -:   19:
        -:   20:#include <boost/asio/detail/push_options.hpp>
        -:   21:
        -:   22:namespace boost {
        -:   23:namespace asio {
        -:   24:namespace detail {
        -:   25:
        -:   26:template <typename Operation>
        -:   27:class op_queue;
        -:   28:
        -:   29:class op_queue_access
        -:   30:{
        -:   31:public:
        -:   32:  template <typename Operation>
       15:   33:  static Operation* next(Operation* o)
        -:   34:  {
       15:   35:    return static_cast<Operation*>(o->next_);
        -:   36:  }
------------------
_ZN5boost4asio6detail15op_queue_access4nextINS1_19scheduler_operationEEEPT_S6_:
       13:   33:  static Operation* next(Operation* o)
        -:   34:  {
       13:   35:    return static_cast<Operation*>(o->next_);
       13:   35-block  0
        -:   36:  }
------------------
_ZN5boost4asio6detail15op_queue_access4nextINS1_10reactor_opEEEPT_S6_:
        2:   33:  static Operation* next(Operation* o)
        -:   34:  {
        2:   35:    return static_cast<Operation*>(o->next_);
        2:   35-block  0
        -:   36:  }
------------------
        -:   37:
        -:   38:  template <typename Operation1, typename Operation2>
       33:   39:  static void next(Operation1*& o1, Operation2* o2)
        -:   40:  {
       33:   41:    o1->next_ = o2;
       33:   42:  }
------------------
_ZN5boost4asio6detail15op_queue_access4nextINS1_10reactor_opES4_EEvRPT_PT0_:
        4:   39:  static void next(Operation1*& o1, Operation2* o2)
        -:   40:  {
        4:   41:    o1->next_ = o2;
        4:   42:  }
------------------
_ZN5boost4asio6detail15op_queue_access4nextINS1_19scheduler_operationES4_EEvRPT_PT0_:
       29:   39:  static void next(Operation1*& o1, Operation2* o2)
        -:   40:  {
       29:   41:    o1->next_ = o2;
       29:   42:  }
------------------
        -:   43:
        -:   44:  template <typename Operation>
    #####:   45:  static void destroy(Operation* o)
        -:   46:  {
    #####:   47:    o->destroy();
    #####:   48:  }
------------------
_ZN5boost4asio6detail15op_queue_access7destroyINS1_10reactor_opEEEvPT_:
    #####:   45:  static void destroy(Operation* o)
        -:   46:  {
    #####:   47:    o->destroy();
    %%%%%:   47-block  0
    #####:   48:  }
------------------
_ZN5boost4asio6detail15op_queue_access7destroyINS1_19scheduler_operationEEEvPT_:
    #####:   45:  static void destroy(Operation* o)
        -:   46:  {
    #####:   47:    o->destroy();
    %%%%%:   47-block  0
    #####:   48:  }
------------------
        -:   49:
        -:   50:  template <typename Operation>
       7*:   51:  static Operation*& front(op_queue<Operation>& q)
        -:   52:  {
       7*:   53:    return q.front_;
        -:   54:  }
------------------
_ZN5boost4asio6detail15op_queue_access5frontINS1_19scheduler_operationEEERPT_RNS1_8op_queueIS5_EE:
        7:   51:  static Operation*& front(op_queue<Operation>& q)
        -:   52:  {
        7:   53:    return q.front_;
        7:   53-block  0
        -:   54:  }
------------------
_ZN5boost4asio6detail15op_queue_access5frontINS1_10reactor_opEEERPT_RNS1_8op_queueIS5_EE:
    #####:   51:  static Operation*& front(op_queue<Operation>& q)
        -:   52:  {
    #####:   53:    return q.front_;
    %%%%%:   53-block  0
        -:   54:  }
------------------
        -:   55:
        -:   56:  template <typename Operation>
       6*:   57:  static Operation*& back(op_queue<Operation>& q)
        -:   58:  {
       6*:   59:    return q.back_;
        -:   60:  }
------------------
_ZN5boost4asio6detail15op_queue_access4backINS1_19scheduler_operationEEERPT_RNS1_8op_queueIS5_EE:
        6:   57:  static Operation*& back(op_queue<Operation>& q)
        -:   58:  {
        6:   59:    return q.back_;
        6:   59-block  0
        -:   60:  }
------------------
_ZN5boost4asio6detail15op_queue_access4backINS1_10reactor_opEEERPT_RNS1_8op_queueIS5_EE:
    #####:   57:  static Operation*& back(op_queue<Operation>& q)
        -:   58:  {
    #####:   59:    return q.back_;
    %%%%%:   59-block  0
        -:   60:  }
------------------
        -:   61:};
        -:   62:
        -:   63:template <typename Operation>
        -:   64:class op_queue
        -:   65:  : private noncopyable
        -:   66:{
        -:   67:public:
        -:   68:  // Constructor.
        5:   69:  op_queue()
        -:   70:    : front_(0),
        5:   71:      back_(0)
        5:   71-block  0
        -:   72:  {
        5:   73:  }
        -:   74:
        -:   75:  // Destructor destroys all operations.
       4*:   76:  ~op_queue()
        -:   77:  {
       4*:   78:    while (Operation* op = front_)
        -:   79:    {
    #####:   80:      pop();
    #####:   81:      op_queue_access::destroy(op);
        -:   82:    }
       4*:   83:  }
------------------
_ZN5boost4asio6detail8op_queueINS1_10reactor_opEED2Ev:
    #####:   76:  ~op_queue()
        -:   77:  {
    #####:   78:    while (Operation* op = front_)
    %%%%%:   78-block  0
        -:   79:    {
    #####:   80:      pop();
    %%%%%:   80-block  0
    #####:   81:      op_queue_access::destroy(op);
        -:   82:    }
    #####:   83:  }
    %%%%%:   83-block  0
------------------
_ZN5boost4asio6detail8op_queueINS1_19scheduler_operationEED2Ev:
        4:   76:  ~op_queue()
        -:   77:  {
       4*:   78:    while (Operation* op = front_)
        4:   78-block  0
        -:   79:    {
    #####:   80:      pop();
    %%%%%:   80-block  0
    #####:   81:      op_queue_access::destroy(op);
        -:   82:    }
        4:   83:  }
        4:   83-block  0
------------------
        -:   84:
        -:   85:  // Get the operation at the front of the queue.
       18:   86:  Operation* front()
        -:   87:  {
       18:   88:    return front_;
        -:   89:  }
------------------
_ZN5boost4asio6detail8op_queueINS1_19scheduler_operationEE5frontEv:
       10:   86:  Operation* front()
        -:   87:  {
       10:   88:    return front_;
       10:   88-block  0
        -:   89:  }
------------------
_ZN5boost4asio6detail8op_queueINS1_10reactor_opEE5frontEv:
        8:   86:  Operation* front()
        -:   87:  {
        8:   88:    return front_;
        8:   88-block  0
        -:   89:  }
------------------
        -:   90:
        -:   91:  // Pop an operation from the front of the queue.
       12:   92:  void pop()
        -:   93:  {
       12:   94:    if (front_)
        -:   95:    {
       12:   96:      Operation* tmp = front_;
       12:   97:      front_ = op_queue_access::next(front_);
       12:   98:      if (front_ == 0)
        6:   99:        back_ = 0;
       12:  100:      op_queue_access::next(tmp, static_cast<Operation*>(0));
        -:  101:    }
       12:  102:  }
------------------
_ZN5boost4asio6detail8op_queueINS1_19scheduler_operationEE3popEv:
       10:   92:  void pop()
        -:   93:  {
       10:   94:    if (front_)
       10:   94-block  0
        -:   95:    {
       10:   96:      Operation* tmp = front_;
       10:   97:      front_ = op_queue_access::next(front_);
       10:   97-block  0
       10:   98:      if (front_ == 0)
        4:   99:        back_ = 0;
        4:   99-block  0
       10:  100:      op_queue_access::next(tmp, static_cast<Operation*>(0));
       10:  100-block  0
        -:  101:    }
       10:  102:  }
------------------
_ZN5boost4asio6detail8op_queueINS1_10reactor_opEE3popEv:
        2:   92:  void pop()
        -:   93:  {
        2:   94:    if (front_)
        2:   94-block  0
        -:   95:    {
        2:   96:      Operation* tmp = front_;
        2:   97:      front_ = op_queue_access::next(front_);
        2:   97-block  0
        2:   98:      if (front_ == 0)
        2:   99:        back_ = 0;
        2:   99-block  0
        2:  100:      op_queue_access::next(tmp, static_cast<Operation*>(0));
        2:  100-block  0
        -:  101:    }
        2:  102:  }
------------------
        -:  103:
        -:  104:  // Push an operation on to the back of the queue.
       12:  105:  void push(Operation* h)
        -:  106:  {
       12:  107:    op_queue_access::next(h, static_cast<Operation*>(0));
       12:  107-block  0
       12:  108:    if (back_)
        -:  109:    {
        6:  110:      op_queue_access::next(back_, h);
        6:  110-block  0
        6:  111:      back_ = h;
        -:  112:    }
        -:  113:    else
        -:  114:    {
        6:  115:      front_ = back_ = h;
        6:  115-block  0
        -:  116:    }
       12:  117:  }
        -:  118:
        -:  119:  // Push all operations from another queue on to the back of the queue. The
        -:  120:  // source queue may contain operations of a derived type.
        -:  121:  template <typename OtherOperation>
       4*:  122:  void push(op_queue<OtherOperation>& q)
        -:  123:  {
       4*:  124:    if (Operation* other_front = op_queue_access::front(q))
        -:  125:    {
       3*:  126:      if (back_)
       1*:  127:        op_queue_access::next(back_, other_front);
        -:  128:      else
       2*:  129:        front_ = other_front;
       3*:  130:      back_ = op_queue_access::back(q);
       3*:  131:      op_queue_access::front(q) = 0;
       3*:  132:      op_queue_access::back(q) = 0;
        -:  133:    }
       4*:  134:  }
------------------
_ZN5boost4asio6detail8op_queueINS1_19scheduler_operationEE4pushIS3_EEvRNS2_IT_EE:
        4:  122:  void push(op_queue<OtherOperation>& q)
        -:  123:  {
        4:  124:    if (Operation* other_front = op_queue_access::front(q))
        4:  124-block  0
        -:  125:    {
        3:  126:      if (back_)
        3:  126-block  0
        1:  127:        op_queue_access::next(back_, other_front);
        1:  127-block  0
        -:  128:      else
        2:  129:        front_ = other_front;
        2:  129-block  0
        3:  130:      back_ = op_queue_access::back(q);
        3:  130-block  0
        3:  131:      op_queue_access::front(q) = 0;
        3:  132:      op_queue_access::back(q) = 0;
        -:  133:    }
        4:  134:  }
------------------
_ZN5boost4asio6detail8op_queueINS1_19scheduler_operationEE4pushINS1_10reactor_opEEEvRNS2_IT_EE:
    #####:  122:  void push(op_queue<OtherOperation>& q)
        -:  123:  {
    #####:  124:    if (Operation* other_front = op_queue_access::front(q))
    %%%%%:  124-block  0
        -:  125:    {
    #####:  126:      if (back_)
    %%%%%:  126-block  0
    #####:  127:        op_queue_access::next(back_, other_front);
    %%%%%:  127-block  0
        -:  128:      else
    #####:  129:        front_ = other_front;
    %%%%%:  129-block  0
    #####:  130:      back_ = op_queue_access::back(q);
    %%%%%:  130-block  0
    #####:  131:      op_queue_access::front(q) = 0;
    #####:  132:      op_queue_access::back(q) = 0;
        -:  133:    }
    #####:  134:  }
------------------
        -:  135:
        -:  136:  // Whether the queue is empty.
       23:  137:  bool empty() const
        -:  138:  {
       23:  139:    return front_ == 0;
       23:  139-block  0
        -:  140:  }
        -:  141:
        -:  142:  // Test whether an operation is already enqueued.
        3:  143:  bool is_enqueued(Operation* o) const
        -:  144:  {
       3*:  145:    return op_queue_access::next(o) != 0 || back_ == o;
        3:  145-block  0
        3:  145-block  1
    %%%%%:  145-block  2
        3:  145-block  3
        3:  145-block  4
        -:  146:  }
        -:  147:
        -:  148:private:
        -:  149:  friend class op_queue_access;
        -:  150:
        -:  151:  // The front of the queue.
        -:  152:  Operation* front_;
        -:  153:
        -:  154:  // The back of the queue.
        -:  155:  Operation* back_;
        -:  156:};
        -:  157:
        -:  158:} // namespace detail
        -:  159:} // namespace asio
        -:  160:} // namespace boost
        -:  161:
        -:  162:#include <boost/asio/detail/pop_options.hpp>
        -:  163:
        -:  164:#endif // BOOST_ASIO_DETAIL_OP_QUEUE_HPP
