        -:    0:Source:/usr/include/boost/asio/ip/address.hpp
        -:    0:Graph:/home/anthonytintul/CLionProjects/TLConsoleApplication/cmake-build-debug/CMakeFiles/TLConsoleApplication.dir/lib/BoostNetworkClient/BoostNetworkClient.cpp.gcno
        -:    0:Data:/home/anthonytintul/CLionProjects/TLConsoleApplication/cmake-build-debug/CMakeFiles/TLConsoleApplication.dir/lib/BoostNetworkClient/BoostNetworkClient.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// ip/address.hpp
        -:    3:// ~~~~~~~~~~~~~~
        -:    4://
        -:    5:// Copyright (c) 2003-2020 Christopher M. Kohlhoff (chris at kohlhoff dot com)
        -:    6://
        -:    7:// Distributed under the Boost Software License, Version 1.0. (See accompanying
        -:    8:// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -:    9://
        -:   10:
        -:   11:#ifndef BOOST_ASIO_IP_ADDRESS_HPP
        -:   12:#define BOOST_ASIO_IP_ADDRESS_HPP
        -:   13:
        -:   14:#if defined(_MSC_VER) && (_MSC_VER >= 1200)
        -:   15:# pragma once
        -:   16:#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)
        -:   17:
        -:   18:#include <boost/asio/detail/config.hpp>
        -:   19:#include <string>
        -:   20:#include <boost/asio/detail/throw_exception.hpp>
        -:   21:#include <boost/asio/detail/string_view.hpp>
        -:   22:#include <boost/asio/detail/type_traits.hpp>
        -:   23:#include <boost/system/error_code.hpp>
        -:   24:#include <boost/asio/ip/address_v4.hpp>
        -:   25:#include <boost/asio/ip/address_v6.hpp>
        -:   26:#include <boost/asio/ip/bad_address_cast.hpp>
        -:   27:
        -:   28:#if !defined(BOOST_ASIO_NO_IOSTREAM)
        -:   29:# include <iosfwd>
        -:   30:#endif // !defined(BOOST_ASIO_NO_IOSTREAM)
        -:   31:
        -:   32:#include <boost/asio/detail/push_options.hpp>
        -:   33:
        -:   34:namespace boost {
        -:   35:namespace asio {
        -:   36:namespace ip {
        -:   37:
        -:   38:/// Implements version-independent IP addresses.
        -:   39:/**
        -:   40: * The boost::asio::ip::address class provides the ability to use either IP
        -:   41: * version 4 or version 6 addresses.
        -:   42: *
        -:   43: * @par Thread Safety
        -:   44: * @e Distinct @e objects: Safe.@n
        -:   45: * @e Shared @e objects: Unsafe.
        -:   46: */
        -:   47:class address
        -:   48:{
        -:   49:public:
        -:   50:  /// Default constructor.
        -:   51:  BOOST_ASIO_DECL address() BOOST_ASIO_NOEXCEPT;
        -:   52:
        -:   53:  /// Construct an address from an IPv4 address.
        -:   54:  BOOST_ASIO_DECL address(
        -:   55:      const boost::asio::ip::address_v4& ipv4_address) BOOST_ASIO_NOEXCEPT;
        -:   56:
        -:   57:  /// Construct an address from an IPv6 address.
        -:   58:  BOOST_ASIO_DECL address(
        -:   59:      const boost::asio::ip::address_v6& ipv6_address) BOOST_ASIO_NOEXCEPT;
        -:   60:
        -:   61:  /// Copy constructor.
        -:   62:  BOOST_ASIO_DECL address(const address& other) BOOST_ASIO_NOEXCEPT;
        -:   63:
        -:   64:#if defined(BOOST_ASIO_HAS_MOVE)
        -:   65:  /// Move constructor.
        -:   66:  BOOST_ASIO_DECL address(address&& other) BOOST_ASIO_NOEXCEPT;
        -:   67:#endif // defined(BOOST_ASIO_HAS_MOVE)
        -:   68:
        -:   69:  /// Assign from another address.
        -:   70:  BOOST_ASIO_DECL address& operator=(const address& other) BOOST_ASIO_NOEXCEPT;
        -:   71:
        -:   72:#if defined(BOOST_ASIO_HAS_MOVE)
        -:   73:  /// Move-assign from another address.
        -:   74:  BOOST_ASIO_DECL address& operator=(address&& other) BOOST_ASIO_NOEXCEPT;
        -:   75:#endif // defined(BOOST_ASIO_HAS_MOVE)
        -:   76:
        -:   77:  /// Assign from an IPv4 address.
        -:   78:  BOOST_ASIO_DECL address& operator=(
        -:   79:      const boost::asio::ip::address_v4& ipv4_address) BOOST_ASIO_NOEXCEPT;
        -:   80:
        -:   81:  /// Assign from an IPv6 address.
        -:   82:  BOOST_ASIO_DECL address& operator=(
        -:   83:      const boost::asio::ip::address_v6& ipv6_address) BOOST_ASIO_NOEXCEPT;
        -:   84:
        -:   85:  /// Get whether the address is an IP version 4 address.
        1:   86:  bool is_v4() const BOOST_ASIO_NOEXCEPT
        -:   87:  {
        1:   88:    return type_ == ipv4;
        1:   88-block  0
        -:   89:  }
        -:   90:
        -:   91:  /// Get whether the address is an IP version 6 address.
        -:   92:  bool is_v6() const BOOST_ASIO_NOEXCEPT
        -:   93:  {
        -:   94:    return type_ == ipv6;
        -:   95:  }
        -:   96:
        -:   97:  /// Get the address as an IP version 4 address.
        -:   98:  BOOST_ASIO_DECL boost::asio::ip::address_v4 to_v4() const;
        -:   99:
        -:  100:  /// Get the address as an IP version 6 address.
        -:  101:  BOOST_ASIO_DECL boost::asio::ip::address_v6 to_v6() const;
        -:  102:
        -:  103:  /// Get the address as a string.
        -:  104:  BOOST_ASIO_DECL std::string to_string() const;
        -:  105:
        -:  106:#if !defined(BOOST_ASIO_NO_DEPRECATED)
        -:  107:  /// (Deprecated: Use other overload.) Get the address as a string.
        -:  108:  BOOST_ASIO_DECL std::string to_string(boost::system::error_code& ec) const;
        -:  109:
        -:  110:  /// (Deprecated: Use make_address().) Create an address from an IPv4 address
        -:  111:  /// string in dotted decimal form, or from an IPv6 address in hexadecimal
        -:  112:  /// notation.
        -:  113:  static address from_string(const char* str);
        -:  114:
        -:  115:  /// (Deprecated: Use make_address().) Create an address from an IPv4 address
        -:  116:  /// string in dotted decimal form, or from an IPv6 address in hexadecimal
        -:  117:  /// notation.
        -:  118:  static address from_string(const char* str, boost::system::error_code& ec);
        -:  119:
        -:  120:  /// (Deprecated: Use make_address().) Create an address from an IPv4 address
        -:  121:  /// string in dotted decimal form, or from an IPv6 address in hexadecimal
        -:  122:  /// notation.
        -:  123:  static address from_string(const std::string& str);
        -:  124:
        -:  125:  /// (Deprecated: Use make_address().) Create an address from an IPv4 address
        -:  126:  /// string in dotted decimal form, or from an IPv6 address in hexadecimal
        -:  127:  /// notation.
        -:  128:  static address from_string(
        -:  129:      const std::string& str, boost::system::error_code& ec);
        -:  130:#endif // !defined(BOOST_ASIO_NO_DEPRECATED)
        -:  131:
        -:  132:  /// Determine whether the address is a loopback address.
        -:  133:  BOOST_ASIO_DECL bool is_loopback() const BOOST_ASIO_NOEXCEPT;
        -:  134:
        -:  135:  /// Determine whether the address is unspecified.
        -:  136:  BOOST_ASIO_DECL bool is_unspecified() const BOOST_ASIO_NOEXCEPT;
        -:  137:
        -:  138:  /// Determine whether the address is a multicast address.
        -:  139:  BOOST_ASIO_DECL bool is_multicast() const BOOST_ASIO_NOEXCEPT;
        -:  140:
        -:  141:  /// Compare two addresses for equality.
        -:  142:  BOOST_ASIO_DECL friend bool operator==(const address& a1,
        -:  143:      const address& a2) BOOST_ASIO_NOEXCEPT;
        -:  144:
        -:  145:  /// Compare two addresses for inequality.
        -:  146:  friend bool operator!=(const address& a1,
        -:  147:      const address& a2) BOOST_ASIO_NOEXCEPT
        -:  148:  {
        -:  149:    return !(a1 == a2);
        -:  150:  }
        -:  151:
        -:  152:  /// Compare addresses for ordering.
        -:  153:  BOOST_ASIO_DECL friend bool operator<(const address& a1,
        -:  154:      const address& a2) BOOST_ASIO_NOEXCEPT;
        -:  155:
        -:  156:  /// Compare addresses for ordering.
        -:  157:  friend bool operator>(const address& a1,
        -:  158:      const address& a2) BOOST_ASIO_NOEXCEPT
        -:  159:  {
        -:  160:    return a2 < a1;
        -:  161:  }
        -:  162:
        -:  163:  /// Compare addresses for ordering.
        -:  164:  friend bool operator<=(const address& a1,
        -:  165:      const address& a2) BOOST_ASIO_NOEXCEPT
        -:  166:  {
        -:  167:    return !(a2 < a1);
        -:  168:  }
        -:  169:
        -:  170:  /// Compare addresses for ordering.
        -:  171:  friend bool operator>=(const address& a1,
        -:  172:      const address& a2) BOOST_ASIO_NOEXCEPT
        -:  173:  {
        -:  174:    return !(a1 < a2);
        -:  175:  }
        -:  176:
        -:  177:private:
        -:  178:  // The type of the address.
        -:  179:  enum { ipv4, ipv6 } type_;
        -:  180:
        -:  181:  // The underlying IPv4 address.
        -:  182:  boost::asio::ip::address_v4 ipv4_address_;
        -:  183:
        -:  184:  // The underlying IPv6 address.
        -:  185:  boost::asio::ip::address_v6 ipv6_address_;
        -:  186:};
        -:  187:
        -:  188:/// Create an address from an IPv4 address string in dotted decimal form,
        -:  189:/// or from an IPv6 address in hexadecimal notation.
        -:  190:/**
        -:  191: * @relates address
        -:  192: */
        -:  193:BOOST_ASIO_DECL address make_address(const char* str);
        -:  194:
        -:  195:/// Create an address from an IPv4 address string in dotted decimal form,
        -:  196:/// or from an IPv6 address in hexadecimal notation.
        -:  197:/**
        -:  198: * @relates address
        -:  199: */
        -:  200:BOOST_ASIO_DECL address make_address(const char* str,
        -:  201:    boost::system::error_code& ec) BOOST_ASIO_NOEXCEPT;
        -:  202:
        -:  203:/// Create an address from an IPv4 address string in dotted decimal form,
        -:  204:/// or from an IPv6 address in hexadecimal notation.
        -:  205:/**
        -:  206: * @relates address
        -:  207: */
        -:  208:BOOST_ASIO_DECL address make_address(const std::string& str);
        -:  209:
        -:  210:/// Create an address from an IPv4 address string in dotted decimal form,
        -:  211:/// or from an IPv6 address in hexadecimal notation.
        -:  212:/**
        -:  213: * @relates address
        -:  214: */
        -:  215:BOOST_ASIO_DECL address make_address(const std::string& str,
        -:  216:    boost::system::error_code& ec) BOOST_ASIO_NOEXCEPT;
        -:  217:
        -:  218:#if defined(BOOST_ASIO_HAS_STRING_VIEW) \
        -:  219:  || defined(GENERATING_DOCUMENTATION)
        -:  220:
        -:  221:/// Create an address from an IPv4 address string in dotted decimal form,
        -:  222:/// or from an IPv6 address in hexadecimal notation.
        -:  223:/**
        -:  224: * @relates address
        -:  225: */
        -:  226:BOOST_ASIO_DECL address make_address(string_view str);
        -:  227:
        -:  228:/// Create an address from an IPv4 address string in dotted decimal form,
        -:  229:/// or from an IPv6 address in hexadecimal notation.
        -:  230:/**
        -:  231: * @relates address
        -:  232: */
        -:  233:BOOST_ASIO_DECL address make_address(string_view str,
        -:  234:    boost::system::error_code& ec) BOOST_ASIO_NOEXCEPT;
        -:  235:
        -:  236:#endif // defined(BOOST_ASIO_HAS_STRING_VIEW)
        -:  237:       //  || defined(GENERATING_DOCUMENTATION)
        -:  238:
        -:  239:#if !defined(BOOST_ASIO_NO_IOSTREAM)
        -:  240:
        -:  241:/// Output an address as a string.
        -:  242:/**
        -:  243: * Used to output a human-readable string for a specified address.
        -:  244: *
        -:  245: * @param os The output stream to which the string will be written.
        -:  246: *
        -:  247: * @param addr The address to be written.
        -:  248: *
        -:  249: * @return The output stream.
        -:  250: *
        -:  251: * @relates boost::asio::ip::address
        -:  252: */
        -:  253:template <typename Elem, typename Traits>
        -:  254:std::basic_ostream<Elem, Traits>& operator<<(
        -:  255:    std::basic_ostream<Elem, Traits>& os, const address& addr);
        -:  256:
        -:  257:#endif // !defined(BOOST_ASIO_NO_IOSTREAM)
        -:  258:
        -:  259:} // namespace ip
        -:  260:} // namespace asio
        -:  261:} // namespace boost
        -:  262:
        -:  263:#include <boost/asio/detail/pop_options.hpp>
        -:  264:
        -:  265:#include <boost/asio/ip/impl/address.hpp>
        -:  266:#if defined(BOOST_ASIO_HEADER_ONLY)
        -:  267:# include <boost/asio/ip/impl/address.ipp>
        -:  268:#endif // defined(BOOST_ASIO_HEADER_ONLY)
        -:  269:
        -:  270:#endif // BOOST_ASIO_IP_ADDRESS_HPP
