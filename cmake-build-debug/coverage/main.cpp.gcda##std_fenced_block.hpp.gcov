        -:    0:Source:/usr/include/boost/asio/detail/std_fenced_block.hpp
        -:    0:Graph:/home/anthonytintul/CLionProjects/TLConsoleApplication/cmake-build-debug/CMakeFiles/TLConsoleApplication.dir/src/main.cpp.gcno
        -:    0:Data:/home/anthonytintul/CLionProjects/TLConsoleApplication/cmake-build-debug/CMakeFiles/TLConsoleApplication.dir/src/main.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// detail/std_fenced_block.hpp
        -:    3:// ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        -:    4://
        -:    5:// Copyright (c) 2003-2020 Christopher M. Kohlhoff (chris at kohlhoff dot com)
        -:    6://
        -:    7:// Distributed under the Boost Software License, Version 1.0. (See accompanying
        -:    8:// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -:    9://
        -:   10:
        -:   11:#ifndef BOOST_ASIO_DETAIL_STD_FENCED_BLOCK_HPP
        -:   12:#define BOOST_ASIO_DETAIL_STD_FENCED_BLOCK_HPP
        -:   13:
        -:   14:#if defined(_MSC_VER) && (_MSC_VER >= 1200)
        -:   15:# pragma once
        -:   16:#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)
        -:   17:
        -:   18:#include <boost/asio/detail/config.hpp>
        -:   19:
        -:   20:#if defined(BOOST_ASIO_HAS_STD_ATOMIC)
        -:   21:
        -:   22:#include <atomic>
        -:   23:#include <boost/asio/detail/noncopyable.hpp>
        -:   24:
        -:   25:#include <boost/asio/detail/push_options.hpp>
        -:   26:
        -:   27:namespace boost {
        -:   28:namespace asio {
        -:   29:namespace detail {
        -:   30:
        -:   31:class std_fenced_block
        -:   32:  : private noncopyable
        -:   33:{
        -:   34:public:
        -:   35:  enum half_t { half };
        -:   36:  enum full_t { full };
        -:   37:
        -:   38:  // Constructor for a half fenced block.
        4:   39:  explicit std_fenced_block(half_t)
        4:   40:  {
        4:   40-block  0
        4:   41:  }
        -:   42:
        -:   43:  // Constructor for a full fenced block.
    #####:   44:  explicit std_fenced_block(full_t)
    #####:   45:  {
    %%%%%:   45-block  0
        -:   46:    std::atomic_thread_fence(std::memory_order_acquire);
    #####:   47:  }
        -:   48:
        -:   49:  // Destructor.
        4:   50:  ~std_fenced_block()
        4:   50-block  0
        4:   51:  {
        4:   51-block  0
        -:   52:    std::atomic_thread_fence(std::memory_order_release);
        4:   53:  }
        -:   54:};
        -:   55:
        -:   56:} // namespace detail
        -:   57:} // namespace asio
        -:   58:} // namespace boost
        -:   59:
        -:   60:#include <boost/asio/detail/pop_options.hpp>
        -:   61:
        -:   62:#endif // defined(BOOST_ASIO_HAS_STD_ATOMIC)
        -:   63:
        -:   64:#endif // BOOST_ASIO_DETAIL_STD_FENCED_BLOCK_HPP
