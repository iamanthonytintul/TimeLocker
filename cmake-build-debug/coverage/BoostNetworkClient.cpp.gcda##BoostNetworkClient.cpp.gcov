        -:    0:Source:/home/anthonytintul/CLionProjects/TLConsoleApplication/lib/BoostNetworkClient/BoostNetworkClient.cpp
        -:    0:Graph:/home/anthonytintul/CLionProjects/TLConsoleApplication/cmake-build-debug/CMakeFiles/TLConsoleApplication.dir/lib/BoostNetworkClient/BoostNetworkClient.cpp.gcno
        -:    0:Data:/home/anthonytintul/CLionProjects/TLConsoleApplication/cmake-build-debug/CMakeFiles/TLConsoleApplication.dir/lib/BoostNetworkClient/BoostNetworkClient.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "boostNetwork.h"
        -:    2:
        1:    3:void BoostNetworkClient::handleReadBody(boost::system::error_code const &errorCode, std::size_t bytesTransferred) {
        -:    4:
       1*:    5:    if (errorCode && errorCode != boost::asio::error::eof) {
        1:    5-block  0
    %%%%%:    5-block  1
    %%%%%:    5-block  2
        1:    5-block  3
        1:    5-block  4
        -:    6:        throw std::runtime_error{
    #####:    7:                "handleReadBody() : " + std::to_string(errorCode.value()) + ", " + errorCode.message()};
    %%%%%:    7-block  0
    %%%%%:    7-block  1
    %%%%%:    7-block  2
    %%%%%:    7-block  3
    %%%%%:    7-block  4
    %%%%%:    7-block  5
    %%%%%:    7-block  6
    $$$$$:    7-block  7
    $$$$$:    7-block  8
    $$$$$:    7-block  9
    $$$$$:    7-block 10
    $$$$$:    7-block 11
    $$$$$:    7-block 12
    $$$$$:    7-block 13
    $$$$$:    7-block 14
    $$$$$:    7-block 15
    $$$$$:    7-block 16
    $$$$$:    7-block 17
        -:    8:    }
        -:    9:
        1:   10:    sizeOfBody += bytesTransferred;
        1:   11:    outputFileStream << &streamBuf;
        1:   11-block  0
        1:   12:    std::cout << "sizeOfBody = " << sizeOfBody << std::endl;
        -:   13:
       1*:   14:    if (sizeOfBody != fileSize && errorCode != boost::asio::error::eof) {
    %%%%%:   14-block  0
    %%%%%:   14-block  1
        1:   14-block  2
        1:   14-block  3
    #####:   15:        boost::asio::async_read(sock, streamBuf, boost::asio::transfer_at_least(1),
    %%%%%:   15-block  0
    %%%%%:   15-block  1
    $$$$$:   15-block  2
    #####:   16:                                [this](const boost::system::error_code &e,
    #####:   17:                                       std::size_t bytes_transferred) -> void {
    #####:   18:                                    this->handleReadBody(e, bytes_transferred);
    %%%%%:   18-block  0
    #####:   19:                                });
        1:   20:    } else if (sizeOfBody == fileSize) {
        1:   20-block  0
        1:   21:        std::cout << "handleReadBody() : Transfer complete successfully" << std::endl;
        1:   21-block  0
        -:   22:    } else {
        -:   23:        throw std::runtime_error{
    #####:   24:                "handleReadBody() : " + std::to_string(errorCode.value()) + ", " + errorCode.message()};
    %%%%%:   24-block  0
    %%%%%:   24-block  1
    %%%%%:   24-block  2
    %%%%%:   24-block  3
    %%%%%:   24-block  4
    %%%%%:   24-block  5
    %%%%%:   24-block  6
    $$$$$:   24-block  7
    $$$$$:   24-block  8
    $$$$$:   24-block  9
    $$$$$:   24-block 10
    $$$$$:   24-block 11
    $$$$$:   24-block 12
    $$$$$:   24-block 13
    $$$$$:   24-block 14
    $$$$$:   24-block 15
    $$$$$:   24-block 16
    $$$$$:   24-block 17
        -:   25:    }
        1:   26:}
        1:   26-block  0
        -:   27:
        1:   28:void BoostNetworkClient::handleReadHeader(boost::system::error_code const &errorCode, std::size_t bytesTransferred) {
        1:   29:    if (errorCode) {
        1:   29-block  0
        -:   30:        throw std::runtime_error{
    #####:   31:                "handleReadHeader() : " + std::to_string(errorCode.value()) + ", " + errorCode.message()};
    %%%%%:   31-block  0
    %%%%%:   31-block  1
    %%%%%:   31-block  2
    %%%%%:   31-block  3
    %%%%%:   31-block  4
    %%%%%:   31-block  5
    %%%%%:   31-block  6
    $$$$$:   31-block  7
    $$$$$:   31-block  8
    $$$$$:   31-block  9
    $$$$$:   31-block 10
    $$$$$:   31-block 11
    $$$$$:   31-block 12
    $$$$$:   31-block 13
    $$$$$:   31-block 14
    $$$$$:   31-block 15
    $$$$$:   31-block 16
    $$$$$:   31-block 17
        -:   32:    }
        -:   33:
        2:   34:    std::string headers{std::istreambuf_iterator<char>{inputStreamFromBuf.rdbuf()}, {}};
        1:   34-block  0
        1:   34-block  1
    $$$$$:   34-block  2
    $$$$$:   34-block  3
    $$$$$:   34-block  4
    $$$$$:   34-block  5
        -:   35:
        1:   36:    std::string::iterator it = headers.begin();
        -:   37:
       46:   38:    while (it != headers.end()) {
       46:   38-block  0
       45:   39:        cout << *it << std::endl;
       45:   39-block  0
       45:   39-block  1
       45:   40:        it++;
       45:   40-block  0
        -:   41:    }
        -:   42:
        1:   43:    fileSize = 186;
        2:   44:    std::string fileName = "sendToServer.txt";
        1:   44-block  0
    $$$$$:   44-block  1
    $$$$$:   44-block  2
        -:   45:
        3:   46:    std::filesystem::path filePathToSave{"/home/anthonytintul/" + fileName + std::filesystem::path{
        1:   46-block  0
        1:   46-block  1
    $$$$$:   46-block  2
    $$$$$:   46-block  3
    $$$$$:   46-block  4
        4:   47:            fileName}.extension().string()};
        1:   47-block  0
        1:   47-block  1
        1:   47-block  2
        1:   47-block  3
    $$$$$:   47-block  4
    $$$$$:   47-block  5
    $$$$$:   47-block  6
        -:   48:
        1:   49:    outputFileStream.open(filePathToSave, std::ios::binary);
        1:   50:    if (!outputFileStream.is_open()) {
        1:   50-block  0
        1:   50-block  1
    #####:   51:        throw std::runtime_error{"handleReadHeader() : Unable to open output file: " + filePathToSave.string()};
    %%%%%:   51-block  0
    %%%%%:   51-block  1
    %%%%%:   51-block  2
    %%%%%:   51-block  3
    $$$$$:   51-block  4
    $$$$$:   51-block  5
    $$$$$:   51-block  6
    $$$$$:   51-block  7
    $$$$$:   51-block  8
        -:   52:    }
        -:   53:
        1:   54:    std::cout << "streamBuf.size() = " << streamBuf.size() << std::endl;
        1:   54-block  0
        1:   54-block  1
        1:   54-block  2
        1:   55:    if (sizeOfBody != fileSize) {
        1:   55-block  0
        1:   56:        boost::asio::async_read(sock, streamBuf, boost::asio::transfer_at_least(1),
        1:   56-block  0
        1:   56-block  1
    $$$$$:   56-block  2
        1:   57:                                [this](const boost::system::error_code &e,
        1:   58:                                       std::size_t bytes_transferred) -> void {
        1:   59:                                    this->handleReadBody(e, bytes_transferred);
        1:   59-block  0
        1:   60:                                });
        -:   61:    } else {
    #####:   62:        std::cout << "handleReadHeader() : Transfer complete successfully" << std::endl;
    %%%%%:   62-block  0
    %%%%%:   62-block  1
        -:   63:    }
        -:   64:
        1:   65:}
        -:   66:
    #####:   67:void BoostNetworkClient::handleWriteBody(boost::system::error_code const &errorCode, std::size_t bytesTransferred) {
    #####:   68:    if (errorCode) {
    %%%%%:   68-block  0
        -:   69:        throw std::runtime_error{
    #####:   70:                "handleWriteBody() : " + std::to_string(errorCode.value()) + ", " + errorCode.message()};
    %%%%%:   70-block  0
    %%%%%:   70-block  1
    %%%%%:   70-block  2
    %%%%%:   70-block  3
    %%%%%:   70-block  4
    %%%%%:   70-block  5
    %%%%%:   70-block  6
    $$$$$:   70-block  7
    $$$$$:   70-block  8
    $$$$$:   70-block  9
    $$$$$:   70-block 10
    $$$$$:   70-block 11
    $$$$$:   70-block 12
    $$$$$:   70-block 13
    $$$$$:   70-block 14
    $$$$$:   70-block 15
    $$$$$:   70-block 16
    $$$$$:   70-block 17
        -:   71:    }
    #####:   72:    sentFileBody += bytesTransferred;
    #####:   73:    if (inputFileStream) {
    %%%%%:   73-block  0
        -:   74:
    #####:   75:        inputFileStream.read(buffer, BUF_SIZE);
    %%%%%:   75-block  0
    #####:   76:        boost::asio::async_write(sock, boost::asio::buffer(buffer, inputFileStream.gcount()),
    %%%%%:   76-block  0
    %%%%%:   76-block  1
    $$$$$:   76-block  2
    $$$$$:   76-block  3
    #####:   77:                                 [this](const boost::system::error_code &e,
    #####:   78:                                        std::size_t bytes_transferred) -> void {
    #####:   79:                                     this->handleWriteBody(e, bytes_transferred);
    %%%%%:   79-block  0
    #####:   80:                                 });
        -:   81:
        -:   82:    } else {
        -:   83:
    #####:   84:        if (sentFileBody != fileSize) {
    %%%%%:   84-block  0
    #####:   85:            throw std::runtime_error{"handleWriteBody(): sentFileBody != fileSize\n"};
    %%%%%:   85-block  0
    %%%%%:   85-block  1
    $$$$$:   85-block  2
        -:   86:        }
        -:   87:
    #####:   88:        std::cout << "sentFileBody: " << sentFileBody << std::endl;
    %%%%%:   88-block  0
    #####:   89:        std::cout << "OK" << std::endl;
        -:   90:    }
    #####:   91:}
    %%%%%:   91-block  0
        -:   92:
        1:   93:void BoostNetworkClient::handleWriteHeader(boost::system::error_code const &errorCode, std::size_t bytesTransferred) {
        1:   94:    if (errorCode) {
        1:   94-block  0
        -:   95:        throw std::runtime_error{
    #####:   96:                "handleWriteHeader() : " + std::to_string(errorCode.value()) + ", " + errorCode.message()};
    %%%%%:   96-block  0
    %%%%%:   96-block  1
    %%%%%:   96-block  2
    %%%%%:   96-block  3
    %%%%%:   96-block  4
    %%%%%:   96-block  5
    %%%%%:   96-block  6
    $$$$$:   96-block  7
    $$$$$:   96-block  8
    $$$$$:   96-block  9
    $$$$$:   96-block 10
    $$$$$:   96-block 11
    $$$$$:   96-block 12
    $$$$$:   96-block 13
    $$$$$:   96-block 14
    $$$$$:   96-block 15
    $$$$$:   96-block 16
    $$$$$:   96-block 17
        -:   97:    }
        1:   98:    if (modeReadWrite == 'd') {
        1:   98-block  0
        1:   99:        boost::asio::async_read_until(sock, streamBuf, "\r\n\r\n",
        1:   99-block  0
        1:   99-block  1
    $$$$$:   99-block  2
    $$$$$:   99-block  3
        1:  100:                                      [this](const boost::system::error_code &e,
        1:  101:                                             std::size_t bytes_transferred) -> void {
        1:  102:                                          this->handleReadHeader(e, bytes_transferred);
        1:  102-block  0
        1:  103:                                      });
        -:  104:    } else {
    #####:  105:        inputFileStream.read(buffer, std::size(buffer));
    %%%%%:  105-block  0
    #####:  106:        boost::asio::async_write(sock, boost::asio::buffer(buffer, inputFileStream.gcount()),
    %%%%%:  106-block  0
    %%%%%:  106-block  1
    $$$$$:  106-block  2
    #####:  107:                                 [this](const boost::system::error_code &e,
    #####:  108:                                        std::size_t bytes_transferred) -> void {
    #####:  109:                                     this->handleWriteBody(e, bytes_transferred);
    %%%%%:  109-block  0
    #####:  110:                                 });
        -:  111:    }
        1:  112:}
        1:  112-block  0
        -:  113:
        -:  114:
        1:  115:void BoostNetworkClient::cleanUp() {
        -:  116:
        -:  117:    try {
        1:  118:        inputFileStream.close();
        1:  118-block  0
        1:  119:        outputFileStream.close();
        1:  119-block  0
        1:  120:        sock.shutdown(boost::asio::ip::tcp::socket::shutdown_both);
        1:  120-block  0
        1:  121:        sock.close();
        1:  121-block  0
        -:  122:    }
    =====:  123:    catch (std::exception &exception) {
    $$$$$:  123-block  0
    $$$$$:  123-block  1
    $$$$$:  123-block  2
    =====:  124:        std::cerr << "Exception: " << exception.what() << std::endl;
    $$$$$:  124-block  0
    $$$$$:  124-block  1
        -:  125:    }
        -:  126:
        1:  127:}
        1:  127-block  0
        -:  128:
        1:  129:void BoostNetworkClient::handleConnection(const boost::system::error_code &errorCode) {
        -:  130:
        1:  131:    if (modeReadWrite == 'd') {
        1:  131-block  0
        -:  132:
        1:  133:        header = "read handlakdfj;alskfj\r\n\r\n";
        1:  133-block  0
        -:  134:
        -:  135:    } else {
        -:  136:
    #####:  137:        std::string filePath{"/home/anthonytintul/client/sendToServer.txt"};
    %%%%%:  137-block  0
    $$$$$:  137-block  1
    $$$$$:  137-block  2
        -:  138:
    #####:  139:        inputFileStream.open(filePath, std::ios::binary);
        -:  140:
    #####:  141:        if (!inputFileStream.is_open()) {
    %%%%%:  141-block  0
    %%%%%:  141-block  1
    #####:  142:            throw std::runtime_error{"handleConnect() : Unable to open input file: " + filePath};
    %%%%%:  142-block  0
    %%%%%:  142-block  1
    %%%%%:  142-block  2
    $$$$$:  142-block  3
    $$$$$:  142-block  4
    $$$$$:  142-block  5
        -:  143:        }
    #####:  144:        fileSize = std::filesystem::file_size(filePath);
    %%%%%:  144-block  0
    %%%%%:  144-block  1
    %%%%%:  144-block  2
    $$$$$:  144-block  3
    $$$$$:  144-block  4
    #####:  145:        cout << "fileSize: " << fileSize << std::endl;
    %%%%%:  145-block  0
    %%%%%:  145-block  1
    #####:  146:        std::stringstream headerString{"FileName: " + std::filesystem::path{filePath}.filename().string() + "\r\n" +
    %%%%%:  146-block  0
    %%%%%:  146-block  1
    %%%%%:  146-block  2
    %%%%%:  146-block  3
    %%%%%:  146-block  4
    %%%%%:  146-block  5
    $$$$$:  146-block  6
    $$$$$:  146-block  7
    $$$$$:  146-block  8
    $$$$$:  146-block  9
    $$$$$:  146-block 10
    $$$$$:  146-block 11
    #####:  147:                                       "FileSize: " + std::to_string(fileSize) + "\r\n\r\n"};
    %%%%%:  147-block  0
    %%%%%:  147-block  1
    %%%%%:  147-block  2
    %%%%%:  147-block  3
    $$$$$:  147-block  4
    $$$$$:  147-block  5
    $$$$$:  147-block  6
    $$$$$:  147-block  7
    #####:  148:        header = headerString.str();
    %%%%%:  148-block  0
        -:  149:
        -:  150:    }
        1:  151:    boost::asio::async_write(sock, boost::asio::buffer(header, header.size()),
        1:  151-block  0
    $$$$$:  151-block  1
        1:  152:                             [this](const boost::system::error_code &e, std::size_t bytes_transferred) -> void {
        1:  153:                                 this->handleWriteHeader(e, bytes_transferred);
        1:  153-block  0
        1:  154:                             });
        -:  155:
        1:  156:}
        1:  156-block  0
        -:  157:
        1:  158:void BoostNetworkClient::manageConnection() {
        1:  159:    std::cout << "Client" << std::endl;
        1:  159-block  0
        -:  160:    try {
        1:  161:        sock.async_connect(boost::asio::ip::tcp::endpoint{boost::asio::ip::address::from_string(HOST), PORT},
        1:  161-block  0
    $$$$$:  161-block  1
    $$$$$:  161-block  2
    $$$$$:  161-block  3
        1:  162:                           [this](const boost::system::error_code &errorCode) -> void {
        1:  163:                               this->handleConnection(errorCode);
        1:  163-block  0
        1:  164:                           });
        1:  165:        ioService.run();
        1:  165-block  0
        -:  166:    }
    =====:  167:    catch (std::exception &ex) {
    $$$$$:  167-block  0
    $$$$$:  167-block  1
    $$$$$:  167-block  2
    =====:  168:        std::cerr << "Exception: " << ex.what() << std::endl;
    $$$$$:  168-block  0
    $$$$$:  168-block  1
        -:  169:    }
        -:  170:
        1:  171:    cleanUp();
        1:  171-block  0
        1:  172:}
