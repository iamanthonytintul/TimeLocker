        -:    0:Source:/usr/include/boost/asio/detail/scoped_ptr.hpp
        -:    0:Graph:/home/anthonytintul/CLionProjects/TLConsoleApplication/cmake-build-debug/CMakeFiles/TLConsoleApplication.dir/src/main.cpp.gcno
        -:    0:Data:/home/anthonytintul/CLionProjects/TLConsoleApplication/cmake-build-debug/CMakeFiles/TLConsoleApplication.dir/src/main.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// detail/scoped_ptr.hpp
        -:    3:// ~~~~~~~~~~~~~~~~~~~~~
        -:    4://
        -:    5:// Copyright (c) 2003-2020 Christopher M. Kohlhoff (chris at kohlhoff dot com)
        -:    6://
        -:    7:// Distributed under the Boost Software License, Version 1.0. (See accompanying
        -:    8:// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -:    9://
        -:   10:
        -:   11:#ifndef BOOST_ASIO_DETAIL_SCOPED_PTR_HPP
        -:   12:#define BOOST_ASIO_DETAIL_SCOPED_PTR_HPP
        -:   13:
        -:   14:#if defined(_MSC_VER) && (_MSC_VER >= 1200)
        -:   15:# pragma once
        -:   16:#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)
        -:   17:
        -:   18:#include <boost/asio/detail/config.hpp>
        -:   19:
        -:   20:#include <boost/asio/detail/push_options.hpp>
        -:   21:
        -:   22:namespace boost {
        -:   23:namespace asio {
        -:   24:namespace detail {
        -:   25:
        -:   26:template <typename T>
        -:   27:class scoped_ptr
        -:   28:{
        -:   29:public:
        -:   30:  // Constructor.
        1:   31:  explicit scoped_ptr(T* p = 0)
        1:   32:    : p_(p)
        -:   33:  {
        1:   34:  }
        -:   35:
        -:   36:  // Destructor.
        1:   37:  ~scoped_ptr()
        -:   38:  {
       1*:   39:    delete p_;
        1:   39-block  0
    %%%%%:   39-block  1
        1:   40:  }
        -:   41:
        -:   42:  // Access.
        1:   43:  T* get()
        -:   44:  {
        1:   45:    return p_;
        1:   45-block  0
        -:   46:  }
        -:   47:
        -:   48:  // Access.
        -:   49:  T* operator->()
        -:   50:  {
        -:   51:    return p_;
        -:   52:  }
        -:   53:
        -:   54:  // Dereference.
        -:   55:  T& operator*()
        -:   56:  {
        -:   57:    return *p_;
        -:   58:  }
        -:   59:
        -:   60:  // Reset pointer.
        -:   61:  void reset(T* p = 0)
        -:   62:  {
        -:   63:    delete p_;
        -:   64:    p_ = p;
        -:   65:  }
        -:   66:
        -:   67:  // Release ownership of the pointer.
        1:   68:  T* release()
        -:   69:  {
        1:   70:    T* tmp = p_;
        1:   71:    p_ = 0;
        1:   72:    return tmp;
        1:   72-block  0
        -:   73:  }
        -:   74:
        -:   75:private:
        -:   76:  // Disallow copying and assignment.
        -:   77:  scoped_ptr(const scoped_ptr&);
        -:   78:  scoped_ptr& operator=(const scoped_ptr&);
        -:   79:
        -:   80:  T* p_;
        -:   81:};
        -:   82:
        -:   83:} // namespace detail
        -:   84:} // namespace asio
        -:   85:} // namespace boost
        -:   86:
        -:   87:#include <boost/asio/detail/pop_options.hpp>
        -:   88:
        -:   89:#endif // BOOST_ASIO_DETAIL_SCOPED_PTR_HPP
