        -:    0:Source:/usr/include/boost/asio/ip/detail/endpoint.hpp
        -:    0:Graph:/home/anthonytintul/CLionProjects/TLConsoleApplication/cmake-build-debug/CMakeFiles/TLConsoleApplication.dir/src/main.cpp.gcno
        -:    0:Data:/home/anthonytintul/CLionProjects/TLConsoleApplication/cmake-build-debug/CMakeFiles/TLConsoleApplication.dir/src/main.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// ip/detail/endpoint.hpp
        -:    3:// ~~~~~~~~~~~~~~~~~~~~~~
        -:    4://
        -:    5:// Copyright (c) 2003-2020 Christopher M. Kohlhoff (chris at kohlhoff dot com)
        -:    6://
        -:    7:// Distributed under the Boost Software License, Version 1.0. (See accompanying
        -:    8:// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -:    9://
        -:   10:
        -:   11:#ifndef BOOST_ASIO_IP_DETAIL_ENDPOINT_HPP
        -:   12:#define BOOST_ASIO_IP_DETAIL_ENDPOINT_HPP
        -:   13:
        -:   14:#if defined(_MSC_VER) && (_MSC_VER >= 1200)
        -:   15:# pragma once
        -:   16:#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)
        -:   17:
        -:   18:#include <boost/asio/detail/config.hpp>
        -:   19:#include <string>
        -:   20:#include <boost/asio/detail/socket_types.hpp>
        -:   21:#include <boost/asio/detail/winsock_init.hpp>
        -:   22:#include <boost/system/error_code.hpp>
        -:   23:#include <boost/asio/ip/address.hpp>
        -:   24:
        -:   25:#include <boost/asio/detail/push_options.hpp>
        -:   26:
        -:   27:namespace boost {
        -:   28:namespace asio {
        -:   29:namespace ip {
        -:   30:namespace detail {
        -:   31:
        -:   32:// Helper class for implementating an IP endpoint.
        -:   33:class endpoint
        -:   34:{
        -:   35:public:
        -:   36:  // Default constructor.
        -:   37:  BOOST_ASIO_DECL endpoint() BOOST_ASIO_NOEXCEPT;
        -:   38:
        -:   39:  // Construct an endpoint using a family and port number.
        -:   40:  BOOST_ASIO_DECL endpoint(int family,
        -:   41:      unsigned short port_num) BOOST_ASIO_NOEXCEPT;
        -:   42:
        -:   43:  // Construct an endpoint using an address and port number.
        -:   44:  BOOST_ASIO_DECL endpoint(const boost::asio::ip::address& addr,
        -:   45:      unsigned short port_num) BOOST_ASIO_NOEXCEPT;
        -:   46:
        -:   47:  // Copy constructor.
        -:   48:  endpoint(const endpoint& other) BOOST_ASIO_NOEXCEPT
        -:   49:    : data_(other.data_)
        -:   50:  {
        -:   51:  }
        -:   52:
        -:   53:  // Assign from another endpoint.
        -:   54:  endpoint& operator=(const endpoint& other) BOOST_ASIO_NOEXCEPT
        -:   55:  {
        -:   56:    data_ = other.data_;
        -:   57:    return *this;
        -:   58:  }
        -:   59:
        -:   60:  // Get the underlying endpoint in the native type.
        -:   61:  boost::asio::detail::socket_addr_type* data() BOOST_ASIO_NOEXCEPT
        -:   62:  {
        -:   63:    return &data_.base;
        -:   64:  }
        -:   65:
        -:   66:  // Get the underlying endpoint in the native type.
        -:   67:  const boost::asio::detail::socket_addr_type* data() const BOOST_ASIO_NOEXCEPT
        -:   68:  {
        -:   69:    return &data_.base;
        -:   70:  }
        -:   71:
        -:   72:  // Get the underlying size of the endpoint in the native type.
        -:   73:  std::size_t size() const BOOST_ASIO_NOEXCEPT
        -:   74:  {
        -:   75:    if (is_v4())
        -:   76:      return sizeof(boost::asio::detail::sockaddr_in4_type);
        -:   77:    else
        -:   78:      return sizeof(boost::asio::detail::sockaddr_in6_type);
        -:   79:  }
        -:   80:
        -:   81:  // Set the underlying size of the endpoint in the native type.
        -:   82:  BOOST_ASIO_DECL void resize(std::size_t new_size);
        -:   83:
        -:   84:  // Get the capacity of the endpoint in the native type.
        -:   85:  std::size_t capacity() const BOOST_ASIO_NOEXCEPT
        -:   86:  {
        -:   87:    return sizeof(data_);
        -:   88:  }
        -:   89:
        -:   90:  // Get the port associated with the endpoint.
        -:   91:  BOOST_ASIO_DECL unsigned short port() const BOOST_ASIO_NOEXCEPT;
        -:   92:
        -:   93:  // Set the port associated with the endpoint.
        -:   94:  BOOST_ASIO_DECL void port(unsigned short port_num) BOOST_ASIO_NOEXCEPT;
        -:   95:
        -:   96:  // Get the IP address associated with the endpoint.
        -:   97:  BOOST_ASIO_DECL boost::asio::ip::address address() const BOOST_ASIO_NOEXCEPT;
        -:   98:
        -:   99:  // Set the IP address associated with the endpoint.
        -:  100:  BOOST_ASIO_DECL void address(
        -:  101:      const boost::asio::ip::address& addr) BOOST_ASIO_NOEXCEPT;
        -:  102:
        -:  103:  // Compare two endpoints for equality.
        -:  104:  BOOST_ASIO_DECL friend bool operator==(const endpoint& e1,
        -:  105:      const endpoint& e2) BOOST_ASIO_NOEXCEPT;
        -:  106:
        -:  107:  // Compare endpoints for ordering.
        -:  108:  BOOST_ASIO_DECL friend bool operator<(const endpoint& e1,
        -:  109:      const endpoint& e2) BOOST_ASIO_NOEXCEPT;
        -:  110:
        -:  111:  // Determine whether the endpoint is IPv4.
        3:  112:  bool is_v4() const BOOST_ASIO_NOEXCEPT
        -:  113:  {
        3:  114:    return data_.base.sa_family == BOOST_ASIO_OS_DEF(AF_INET);
        3:  114-block  0
        -:  115:  }
        -:  116:
        -:  117:#if !defined(BOOST_ASIO_NO_IOSTREAM)
        -:  118:  // Convert to a string.
        -:  119:  BOOST_ASIO_DECL std::string to_string() const;
        -:  120:#endif // !defined(BOOST_ASIO_NO_IOSTREAM)
        -:  121:
        -:  122:private:
        -:  123:  // The underlying IP socket address.
        -:  124:  union data_union
        -:  125:  {
        -:  126:    boost::asio::detail::socket_addr_type base;
        -:  127:    boost::asio::detail::sockaddr_in4_type v4;
        -:  128:    boost::asio::detail::sockaddr_in6_type v6;
        -:  129:  } data_;
        -:  130:};
        -:  131:
        -:  132:} // namespace detail
        -:  133:} // namespace ip
        -:  134:} // namespace asio
        -:  135:} // namespace boost
        -:  136:
        -:  137:#include <boost/asio/detail/pop_options.hpp>
        -:  138:
        -:  139:#if defined(BOOST_ASIO_HEADER_ONLY)
        -:  140:# include <boost/asio/ip/detail/impl/endpoint.ipp>
        -:  141:#endif // defined(BOOST_ASIO_HEADER_ONLY)
        -:  142:
        -:  143:#endif // BOOST_ASIO_IP_DETAIL_ENDPOINT_HPP
