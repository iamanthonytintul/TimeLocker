        -:    0:Source:/usr/include/boost/asio/detail/executor_function.hpp
        -:    0:Graph:/home/anthonytintul/CLionProjects/TLConsoleApplication/cmake-build-debug/CMakeFiles/TLConsoleApplication.dir/src/main.cpp.gcno
        -:    0:Data:/home/anthonytintul/CLionProjects/TLConsoleApplication/cmake-build-debug/CMakeFiles/TLConsoleApplication.dir/src/main.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// detail/executor_function.hpp
        -:    3:// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        -:    4://
        -:    5:// Copyright (c) 2003-2020 Christopher M. Kohlhoff (chris at kohlhoff dot com)
        -:    6://
        -:    7:// Distributed under the Boost Software License, Version 1.0. (See accompanying
        -:    8:// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -:    9://
        -:   10:
        -:   11:#ifndef BOOST_ASIO_DETAIL_EXECUTOR_FUNCTION_HPP
        -:   12:#define BOOST_ASIO_DETAIL_EXECUTOR_FUNCTION_HPP
        -:   13:
        -:   14:#if defined(_MSC_VER) && (_MSC_VER >= 1200)
        -:   15:# pragma once
        -:   16:#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)
        -:   17:
        -:   18:#include <boost/asio/detail/config.hpp>
        -:   19:#include <boost/asio/detail/handler_alloc_helpers.hpp>
        -:   20:
        -:   21:#include <boost/asio/detail/push_options.hpp>
        -:   22:
        -:   23:namespace boost {
        -:   24:namespace asio {
        -:   25:namespace detail {
        -:   26:
        -:   27:class executor_function_base
        -:   28:{
        -:   29:public:
    #####:   30:  void complete()
        -:   31:  {
    #####:   32:    func_(this, true);
    %%%%%:   32-block  0
    #####:   33:  }
        -:   34:
    #####:   35:  void destroy()
        -:   36:  {
    #####:   37:    func_(this, false);
    %%%%%:   37-block  0
    #####:   38:  }
        -:   39:
        -:   40:protected:
        -:   41:  typedef void (*func_type)(executor_function_base*, bool);
        -:   42:
        -:   43:  executor_function_base(func_type func)
        -:   44:    : func_(func)
        -:   45:  {
        -:   46:  }
        -:   47:
        -:   48:  // Prevents deletion through this type.
        -:   49:  ~executor_function_base()
        -:   50:  {
        -:   51:  }
        -:   52:
        -:   53:private:
        -:   54:  func_type func_;
        -:   55:};
        -:   56:
        -:   57:template <typename Function, typename Alloc>
        -:   58:class executor_function : public executor_function_base
        -:   59:{
        -:   60:public:
        -:   61:  BOOST_ASIO_DEFINE_TAGGED_HANDLER_ALLOCATOR_PTR(
        -:   62:      thread_info_base::executor_function_tag, executor_function);
        -:   63:
        -:   64:  template <typename F>
        -:   65:  executor_function(BOOST_ASIO_MOVE_ARG(F) f, const Alloc& allocator)
        -:   66:    : executor_function_base(&executor_function::do_complete),
        -:   67:      function_(BOOST_ASIO_MOVE_CAST(F)(f)),
        -:   68:      allocator_(allocator)
        -:   69:  {
        -:   70:  }
        -:   71:
        -:   72:  static void do_complete(executor_function_base* base, bool call)
        -:   73:  {
        -:   74:    // Take ownership of the function object.
        -:   75:    executor_function* o(static_cast<executor_function*>(base));
        -:   76:    Alloc allocator(o->allocator_);
        -:   77:    ptr p = { detail::addressof(allocator), o, o };
        -:   78:
        -:   79:    // Make a copy of the function so that the memory can be deallocated before
        -:   80:    // the upcall is made. Even if we're not about to make an upcall, a
        -:   81:    // sub-object of the function may be the true owner of the memory
        -:   82:    // associated with the function. Consequently, a local copy of the function
        -:   83:    // is required to ensure that any owning sub-object remains valid until
        -:   84:    // after we have deallocated the memory here.
        -:   85:    Function function(BOOST_ASIO_MOVE_CAST(Function)(o->function_));
        -:   86:    p.reset();
        -:   87:
        -:   88:    // Make the upcall if required.
        -:   89:    if (call)
        -:   90:    {
        -:   91:      function();
        -:   92:    }
        -:   93:  }
        -:   94:
        -:   95:private:
        -:   96:  Function function_;
        -:   97:  Alloc allocator_;
        -:   98:};
        -:   99:
        -:  100:} // namespace detail
        -:  101:} // namespace asio
        -:  102:} // namespace boost
        -:  103:
        -:  104:#include <boost/asio/detail/pop_options.hpp>
        -:  105:
        -:  106:#endif // BOOST_ASIO_DETAIL_EXECUTOR_FUNCTION_HPP
