        -:    0:Source:/usr/include/boost/asio/associated_allocator.hpp
        -:    0:Graph:/home/anthonytintul/CLionProjects/TLConsoleApplication/cmake-build-debug/CMakeFiles/TLConsoleApplication.dir/lib/BoostNetworkClient/BoostNetworkClient.cpp.gcno
        -:    0:Data:/home/anthonytintul/CLionProjects/TLConsoleApplication/cmake-build-debug/CMakeFiles/TLConsoleApplication.dir/lib/BoostNetworkClient/BoostNetworkClient.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// associated_allocator.hpp
        -:    3:// ~~~~~~~~~~~~~~~~~~~~~~~~
        -:    4://
        -:    5:// Copyright (c) 2003-2020 Christopher M. Kohlhoff (chris at kohlhoff dot com)
        -:    6://
        -:    7:// Distributed under the Boost Software License, Version 1.0. (See accompanying
        -:    8:// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -:    9://
        -:   10:
        -:   11:#ifndef BOOST_ASIO_ASSOCIATED_ALLOCATOR_HPP
        -:   12:#define BOOST_ASIO_ASSOCIATED_ALLOCATOR_HPP
        -:   13:
        -:   14:#if defined(_MSC_VER) && (_MSC_VER >= 1200)
        -:   15:# pragma once
        -:   16:#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)
        -:   17:
        -:   18:#include <boost/asio/detail/config.hpp>
        -:   19:#include <memory>
        -:   20:#include <boost/asio/detail/type_traits.hpp>
        -:   21:
        -:   22:#include <boost/asio/detail/push_options.hpp>
        -:   23:
        -:   24:namespace boost {
        -:   25:namespace asio {
        -:   26:namespace detail {
        -:   27:
        -:   28:template <typename>
        -:   29:struct associated_allocator_check
        -:   30:{
        -:   31:  typedef void type;
        -:   32:};
        -:   33:
        -:   34:template <typename T, typename E, typename = void>
        -:   35:struct associated_allocator_impl
        -:   36:{
        -:   37:  typedef E type;
        -:   38:
      12*:   39:  static type get(const T&, const E& e) BOOST_ASIO_NOEXCEPT
        -:   40:  {
      12*:   41:    return e;
        -:   42:  }
------------------
_ZN5boost4asio6detail25associated_allocator_implIZN18BoostNetworkClient16handleConnectionERKNS_6system10error_codeEEUlS7_mE_SaIvEvE3getERKS8_RKS9_:
        3:   39:  static type get(const T&, const E& e) BOOST_ASIO_NOEXCEPT
        -:   40:  {
        3:   41:    return e;
        3:   41-block  0
        -:   42:  }
------------------
_ZN5boost4asio6detail25associated_allocator_implIZN18BoostNetworkClient17handleWriteHeaderERKNS_6system10error_codeEmEUlS7_mE0_SaIvEvE3getERKS8_RKS9_:
    #####:   39:  static type get(const T&, const E& e) BOOST_ASIO_NOEXCEPT
        -:   40:  {
    #####:   41:    return e;
    %%%%%:   41-block  0
        -:   42:  }
------------------
_ZN5boost4asio6detail25associated_allocator_implIZN18BoostNetworkClient15handleWriteBodyERKNS_6system10error_codeEmEUlS7_mE_SaIvEvE3getERKS8_RKS9_:
    #####:   39:  static type get(const T&, const E& e) BOOST_ASIO_NOEXCEPT
        -:   40:  {
    #####:   41:    return e;
    %%%%%:   41-block  0
        -:   42:  }
------------------
_ZN5boost4asio6detail25associated_allocator_implIZN18BoostNetworkClient17handleWriteHeaderERKNS_6system10error_codeEmEUlS7_mE_SaIvEvE3getERKS8_RKS9_:
        3:   39:  static type get(const T&, const E& e) BOOST_ASIO_NOEXCEPT
        -:   40:  {
        3:   41:    return e;
        3:   41-block  0
        -:   42:  }
------------------
_ZN5boost4asio6detail25associated_allocator_implIZN18BoostNetworkClient16handleReadHeaderERKNS_6system10error_codeEmEUlS7_mE_SaIvEvE3getERKS8_RKS9_:
        3:   39:  static type get(const T&, const E& e) BOOST_ASIO_NOEXCEPT
        -:   40:  {
        3:   41:    return e;
        3:   41-block  0
        -:   42:  }
------------------
_ZN5boost4asio6detail25associated_allocator_implIZN18BoostNetworkClient14handleReadBodyERKNS_6system10error_codeEmEUlS7_mE_SaIvEvE3getERKS8_RKS9_:
    #####:   39:  static type get(const T&, const E& e) BOOST_ASIO_NOEXCEPT
        -:   40:  {
    #####:   41:    return e;
    %%%%%:   41-block  0
        -:   42:  }
------------------
_ZN5boost4asio6detail25associated_allocator_implIZN18BoostNetworkClient16manageConnectionEvEUlRKNS_6system10error_codeEE_SaIvEvE3getERKS8_RKS9_:
        3:   39:  static type get(const T&, const E& e) BOOST_ASIO_NOEXCEPT
        -:   40:  {
        3:   41:    return e;
        3:   41-block  0
        -:   42:  }
------------------
        -:   43:};
        -:   44:
        -:   45:template <typename T, typename E>
        -:   46:struct associated_allocator_impl<T, E,
        -:   47:  typename associated_allocator_check<typename T::allocator_type>::type>
        -:   48:{
        -:   49:  typedef typename T::allocator_type type;
        -:   50:
        -:   51:  static type get(const T& t, const E&) BOOST_ASIO_NOEXCEPT
        -:   52:  {
        -:   53:    return t.get_allocator();
        -:   54:  }
        -:   55:};
        -:   56:
        -:   57:} // namespace detail
        -:   58:
        -:   59:/// Traits type used to obtain the allocator associated with an object.
        -:   60:/**
        -:   61: * A program may specialise this traits type if the @c T template parameter in
        -:   62: * the specialisation is a user-defined type. The template parameter @c
        -:   63: * Allocator shall be a type meeting the Allocator requirements.
        -:   64: *
        -:   65: * Specialisations shall meet the following requirements, where @c t is a const
        -:   66: * reference to an object of type @c T, and @c a is an object of type @c
        -:   67: * Allocator.
        -:   68: *
        -:   69: * @li Provide a nested typedef @c type that identifies a type meeting the
        -:   70: * Allocator requirements.
        -:   71: *
        -:   72: * @li Provide a noexcept static member function named @c get, callable as @c
        -:   73: * get(t) and with return type @c type.
        -:   74: *
        -:   75: * @li Provide a noexcept static member function named @c get, callable as @c
        -:   76: * get(t,a) and with return type @c type.
        -:   77: */
        -:   78:template <typename T, typename Allocator = std::allocator<void> >
        -:   79:struct associated_allocator
        -:   80:{
        -:   81:  /// If @c T has a nested type @c allocator_type, <tt>T::allocator_type</tt>.
        -:   82:  /// Otherwise @c Allocator.
        -:   83:#if defined(GENERATING_DOCUMENTATION)
        -:   84:  typedef see_below type;
        -:   85:#else // defined(GENERATING_DOCUMENTATION)
        -:   86:  typedef typename detail::associated_allocator_impl<T, Allocator>::type type;
        -:   87:#endif // defined(GENERATING_DOCUMENTATION)
        -:   88:
        -:   89:  /// If @c T has a nested type @c allocator_type, returns
        -:   90:  /// <tt>t.get_allocator()</tt>. Otherwise returns @c a.
      12*:   91:  static type get(const T& t,
        -:   92:      const Allocator& a = Allocator()) BOOST_ASIO_NOEXCEPT
        -:   93:  {
      12*:   94:    return detail::associated_allocator_impl<T, Allocator>::get(t, a);
        -:   95:  }
------------------
_ZN5boost4asio20associated_allocatorIZN18BoostNetworkClient16handleConnectionERKNS_6system10error_codeEEUlS6_mE_SaIvEE3getERKS7_RKS8_:
        3:   91:  static type get(const T& t,
        -:   92:      const Allocator& a = Allocator()) BOOST_ASIO_NOEXCEPT
        -:   93:  {
        3:   94:    return detail::associated_allocator_impl<T, Allocator>::get(t, a);
        3:   94-block  0
        -:   95:  }
------------------
_ZN5boost4asio20associated_allocatorIZN18BoostNetworkClient17handleWriteHeaderERKNS_6system10error_codeEmEUlS6_mE0_SaIvEE3getERKS7_RKS8_:
    #####:   91:  static type get(const T& t,
        -:   92:      const Allocator& a = Allocator()) BOOST_ASIO_NOEXCEPT
        -:   93:  {
    #####:   94:    return detail::associated_allocator_impl<T, Allocator>::get(t, a);
    %%%%%:   94-block  0
        -:   95:  }
------------------
_ZN5boost4asio20associated_allocatorIZN18BoostNetworkClient15handleWriteBodyERKNS_6system10error_codeEmEUlS6_mE_SaIvEE3getERKS7_RKS8_:
    #####:   91:  static type get(const T& t,
        -:   92:      const Allocator& a = Allocator()) BOOST_ASIO_NOEXCEPT
        -:   93:  {
    #####:   94:    return detail::associated_allocator_impl<T, Allocator>::get(t, a);
    %%%%%:   94-block  0
        -:   95:  }
------------------
_ZN5boost4asio20associated_allocatorIZN18BoostNetworkClient17handleWriteHeaderERKNS_6system10error_codeEmEUlS6_mE_SaIvEE3getERKS7_RKS8_:
        3:   91:  static type get(const T& t,
        -:   92:      const Allocator& a = Allocator()) BOOST_ASIO_NOEXCEPT
        -:   93:  {
        3:   94:    return detail::associated_allocator_impl<T, Allocator>::get(t, a);
        3:   94-block  0
        -:   95:  }
------------------
_ZN5boost4asio20associated_allocatorIZN18BoostNetworkClient16handleReadHeaderERKNS_6system10error_codeEmEUlS6_mE_SaIvEE3getERKS7_RKS8_:
        3:   91:  static type get(const T& t,
        -:   92:      const Allocator& a = Allocator()) BOOST_ASIO_NOEXCEPT
        -:   93:  {
        3:   94:    return detail::associated_allocator_impl<T, Allocator>::get(t, a);
        3:   94-block  0
        -:   95:  }
------------------
_ZN5boost4asio20associated_allocatorIZN18BoostNetworkClient14handleReadBodyERKNS_6system10error_codeEmEUlS6_mE_SaIvEE3getERKS7_RKS8_:
    #####:   91:  static type get(const T& t,
        -:   92:      const Allocator& a = Allocator()) BOOST_ASIO_NOEXCEPT
        -:   93:  {
    #####:   94:    return detail::associated_allocator_impl<T, Allocator>::get(t, a);
    %%%%%:   94-block  0
        -:   95:  }
------------------
_ZN5boost4asio20associated_allocatorIZN18BoostNetworkClient16manageConnectionEvEUlRKNS_6system10error_codeEE_SaIvEE3getERKS7_RKS8_:
        3:   91:  static type get(const T& t,
        -:   92:      const Allocator& a = Allocator()) BOOST_ASIO_NOEXCEPT
        -:   93:  {
        3:   94:    return detail::associated_allocator_impl<T, Allocator>::get(t, a);
        3:   94-block  0
        -:   95:  }
------------------
        -:   96:};
        -:   97:
        -:   98:/// Helper function to obtain an object's associated allocator.
        -:   99:/**
        -:  100: * @returns <tt>associated_allocator<T>::get(t)</tt>
        -:  101: */
        -:  102:template <typename T>
        -:  103:inline typename associated_allocator<T>::type
      12*:  104:get_associated_allocator(const T& t) BOOST_ASIO_NOEXCEPT
        -:  105:{
      12*:  106:  return associated_allocator<T>::get(t);
        -:  107:}
        -:  108:
        -:  109:/// Helper function to obtain an object's associated allocator.
        -:  110:/**
        -:  111: * @returns <tt>associated_allocator<T, Allocator>::get(t, a)</tt>
        -:  112: */
        -:  113:template <typename T, typename Allocator>
        -:  114:inline typename associated_allocator<T, Allocator>::type
        -:  115:get_associated_allocator(const T& t, const Allocator& a) BOOST_ASIO_NOEXCEPT
        -:  116:{
        -:  117:  return associated_allocator<T, Allocator>::get(t, a);
        -:  118:}
        -:  119:
        -:  120:#if defined(BOOST_ASIO_HAS_ALIAS_TEMPLATES)
        -:  121:
        -:  122:template <typename T, typename Allocator = std::allocator<void> >
        -:  123:using associated_allocator_t
        -:  124:  = typename associated_allocator<T, Allocator>::type;
        -:  125:
        -:  126:#endif // defined(BOOST_ASIO_HAS_ALIAS_TEMPLATES)
        -:  127:
        -:  128:} // namespace asio
        -:  129:} // namespace boost
        -:  130:
        -:  131:#include <boost/asio/detail/pop_options.hpp>
        -:  132:
        -:  133:#endif // BOOST_ASIO_ASSOCIATED_ALLOCATOR_HPP
