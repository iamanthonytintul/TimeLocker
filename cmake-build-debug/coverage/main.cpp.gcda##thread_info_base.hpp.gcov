        -:    0:Source:/usr/include/boost/asio/detail/thread_info_base.hpp
        -:    0:Graph:/home/anthonytintul/CLionProjects/TLConsoleApplication/cmake-build-debug/CMakeFiles/TLConsoleApplication.dir/src/main.cpp.gcno
        -:    0:Data:/home/anthonytintul/CLionProjects/TLConsoleApplication/cmake-build-debug/CMakeFiles/TLConsoleApplication.dir/src/main.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// detail/thread_info_base.hpp
        -:    3:// ~~~~~~~~~~~~~~~~~~~~~~~~~~~
        -:    4://
        -:    5:// Copyright (c) 2003-2020 Christopher M. Kohlhoff (chris at kohlhoff dot com)
        -:    6://
        -:    7:// Distributed under the Boost Software License, Version 1.0. (See accompanying
        -:    8:// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
        -:    9://
        -:   10:
        -:   11:#ifndef BOOST_ASIO_DETAIL_THREAD_INFO_BASE_HPP
        -:   12:#define BOOST_ASIO_DETAIL_THREAD_INFO_BASE_HPP
        -:   13:
        -:   14:#if defined(_MSC_VER) && (_MSC_VER >= 1200)
        -:   15:# pragma once
        -:   16:#endif // defined(_MSC_VER) && (_MSC_VER >= 1200)
        -:   17:
        -:   18:#include <climits>
        -:   19:#include <cstddef>
        -:   20:#include <boost/asio/detail/noncopyable.hpp>
        -:   21:
        -:   22:#include <boost/asio/detail/push_options.hpp>
        -:   23:
        -:   24:namespace boost {
        -:   25:namespace asio {
        -:   26:namespace detail {
        -:   27:
        -:   28:class thread_info_base
        -:   29:  : private noncopyable
        -:   30:{
        -:   31:public:
        -:   32:  struct default_tag
        -:   33:  {
        -:   34:    enum { mem_index = 0 };
        -:   35:  };
        -:   36:
        -:   37:  struct awaitable_frame_tag
        -:   38:  {
        -:   39:    enum { mem_index = 1 };
        -:   40:  };
        -:   41:
        -:   42:  struct executor_function_tag
        -:   43:  {
        -:   44:    enum { mem_index = 2 };
        -:   45:  };
        -:   46:
        1:   47:  thread_info_base()
        1:   48:  {
        1:   48-block  0
        4:   49:    for (int i = 0; i < max_mem_index; ++i)
        4:   49-block  0
        3:   50:      reusable_memory_[i] = 0;
        3:   50-block  0
        1:   51:  }
        -:   52:
        1:   53:  ~thread_info_base()
        1:   54:  {
        1:   54-block  0
        4:   55:    for (int i = 0; i < max_mem_index; ++i)
        1:   55-block  0
        4:   55-block  1
        3:   56:      ::operator delete(reusable_memory_[i]);
        3:   56-block  0
        1:   57:  }
        -:   58:
        -:   59:  static void* allocate(thread_info_base* this_thread, std::size_t size)
        -:   60:  {
        -:   61:    return allocate(default_tag(), this_thread, size);
        -:   62:  }
        -:   63:
        -:   64:  static void deallocate(thread_info_base* this_thread,
        -:   65:      void* pointer, std::size_t size)
        -:   66:  {
        -:   67:    deallocate(default_tag(), this_thread, pointer, size);
        -:   68:  }
        -:   69:
        -:   70:  template <typename Purpose>
        4:   71:  static void* allocate(Purpose, thread_info_base* this_thread,
        -:   72:      std::size_t size)
        -:   73:  {
        4:   74:    std::size_t chunks = (size + chunk_size - 1) / chunk_size;
        -:   75:
        4:   76:    if (this_thread && this_thread->reusable_memory_[Purpose::mem_index])
        4:   76-block  0
        3:   76-block  1
        -:   77:    {
        3:   78:      void* const pointer = this_thread->reusable_memory_[Purpose::mem_index];
        3:   79:      this_thread->reusable_memory_[Purpose::mem_index] = 0;
        -:   80:
        3:   81:      unsigned char* const mem = static_cast<unsigned char*>(pointer);
        3:   82:      if (static_cast<std::size_t>(mem[0]) >= chunks)
        3:   82-block  0
        -:   83:      {
        1:   84:        mem[size] = mem[0];
        1:   85:        return pointer;
        1:   85-block  0
        -:   86:      }
        -:   87:
        2:   88:      ::operator delete(pointer);
        2:   88-block  0
        -:   89:    }
        -:   90:
        3:   91:    void* const pointer = ::operator new(chunks * chunk_size + 1);
        3:   91-block  0
        3:   92:    unsigned char* const mem = static_cast<unsigned char*>(pointer);
       3*:   93:    mem[size] = (chunks <= UCHAR_MAX) ? static_cast<unsigned char>(chunks) : 0;
        3:   93-block  0
    %%%%%:   93-block  1
        3:   94:    return pointer;
        3:   94-block  0
        -:   95:  }
        -:   96:
        -:   97:  template <typename Purpose>
        4:   98:  static void deallocate(Purpose, thread_info_base* this_thread,
        -:   99:      void* pointer, std::size_t size)
        -:  100:  {
        4:  101:    if (size <= chunk_size * UCHAR_MAX)
        4:  101-block  0
        -:  102:    {
        4:  103:      if (this_thread && this_thread->reusable_memory_[Purpose::mem_index] == 0)
        4:  103-block  0
        4:  103-block  1
        -:  104:      {
        4:  105:        unsigned char* const mem = static_cast<unsigned char*>(pointer);
        4:  106:        mem[0] = mem[size];
        4:  107:        this_thread->reusable_memory_[Purpose::mem_index] = pointer;
        4:  108:        return;
        4:  108-block  0
        -:  109:      }
        -:  110:    }
        -:  111:
    #####:  112:    ::operator delete(pointer);
    %%%%%:  112-block  0
        -:  113:  }
        -:  114:
        -:  115:private:
        -:  116:  enum { chunk_size = 4 };
        -:  117:  enum { max_mem_index = 3 };
        -:  118:  void* reusable_memory_[max_mem_index];
        -:  119:};
        -:  120:
        -:  121:} // namespace detail
        -:  122:} // namespace asio
        -:  123:} // namespace boost
        -:  124:
        -:  125:#include <boost/asio/detail/pop_options.hpp>
        -:  126:
        -:  127:#endif // BOOST_ASIO_DETAIL_THREAD_INFO_BASE_HPP
